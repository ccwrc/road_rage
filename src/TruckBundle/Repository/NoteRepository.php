<?php

declare(strict_types=1);

namespace TruckBundle\Repository;

use Doctrine\ORM\{
    EntityRepository, NonUniqueResultException, NoResultException, Query
};

use TruckBundle\Entity\Note;

/**
 * NoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteRepository extends EntityRepository
{

    /**
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function countUserPrivateNotesFromLast24h(int $userId): string
    {
        $dayMinusOne = new \DateTime('now - 1 day');

        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT COUNT (n.id) FROM TruckBundle:Note n WHERE n.timePublication'
            . ' BETWEEN :dayMinusOne AND CURRENT_TIMESTAMP() AND n.status LIKE :private'
            . ' AND n.userId = :userId');
        $query->setParameter('dayMinusOne', $dayMinusOne);
        $query->setParameter('private', Note::$statusPrivate);
        $query->setParameter('userId', $userId);

        return $query->getSingleScalarResult();
    }

    /**
     * @throws NoResultException
     * @throws NonUniqueResultException
     */
    public function countPublicNotesFromLast24h(): string
    {
        $dayMinusOne = new \DateTime('now - 1 day');

        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT COUNT (n.id) FROM TruckBundle:Note n WHERE n.timePublication'
            . ' BETWEEN :dayMinusOne AND CURRENT_TIMESTAMP() AND n.status LIKE :public');
        $query->setParameter('dayMinusOne', $dayMinusOne);
        $query->setParameter('public', Note::$statusPublic);

        return $query->getSingleScalarResult();
    }

    public function findAllPublicNotesQuery(): Query
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT n FROM TruckBundle:Note n WHERE n.timePublication'
            . ' <= CURRENT_TIMESTAMP() AND n.status LIKE :public ORDER BY n.timePublication'
            . ' DESC')->setParameter('public', Note::$statusPublic);
        return $query;
    }

    public function findPrivateActualNotesByUserIdQuery(int $userId): Query
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT n FROM TruckBundle:Note n WHERE n.timePublication'
            . ' <= CURRENT_TIMESTAMP() AND n.userId = :userId ORDER BY n.timePublication'
            . ' DESC')->setParameter('userId', $userId);
        return $query;
    }

    public function findPrivateFutureNotesByUserIdQuery(int $userId): Query
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT n FROM TruckBundle:Note n WHERE n.timePublication'
            . ' >= CURRENT_TIMESTAMP() AND n.userId = :userId ORDER BY n.timePublication'
            . ' ASC')->setParameter('userId', $userId);
        return $query;
    }
}
